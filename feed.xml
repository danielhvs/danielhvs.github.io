<?xml version='1.0' encoding='UTF-8'?>
<rss version='2.0' xmlns:atom='http://www.w3.org/2005/Atom'>
<channel>
<atom:link href='http://danielhvs.github.io/' rel='self' type='application/rss+xml'/>
<title>
Notas de um dev
</title>
<link>
http://danielhvs.github.io/
</link>
<description>
Observações sobre coisas do dia-a-dia de um desenvolvedor de software
</description>
<lastBuildDate>
Tue, 26 Jun 2018 00:45:25 -0300
</lastBuildDate>
<generator>
clj-rss
</generator>
<item>
<guid>
http://danielhvs.github.io/./posts-output/2018-06-25-paradigmas/
</guid>
<link>
http://danielhvs.github.io/./posts-output/2018-06-25-paradigmas/
</link>
<title>
Map e loop for
</title>
<description>
&lt;p&gt;Olha que interessante sobre como toda vez usamos loop &quot;for&quot; em linguagem imperativa para fazer um &quot;map&quot; das linguagens funcionais, declarativas.&lt;/p&gt;&lt;h3 id=&quot;loop&amp;#95;for&quot;&gt;Loop for&lt;/h3&gt;&lt;p&gt;Por exemplo, em Java (versões mais antigas), para obter o dobro de cada elemento de uma lista de 0 a 9, faz-se algo como:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;List&amp;lt;Integer&amp;gt; saidas = new ArrayList&amp;lt;Integer&amp;gt;&amp;#40;&amp;#41;;
List&amp;lt;Integer&amp;gt; entradas = Arrays.asList&amp;#40;0, 1, 2, 3, 4, 5, 6, 7, 8, 9&amp;#41;;
for&amp;#40;Integer entrada : entradas&amp;#41; {
        saidas.add&amp;#40;entrada + 1&amp;#41;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Sempre que se quer fazer alguma operação em todos os elementos de uma lista, usa-se essa forma: loop for, às vezes se usa uma variável contadora, opera em cada elemento. De forma geral:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;private S opera&amp;#40;E elemento&amp;#41; {
        &amp;#40;...&amp;#41;;
}

private List&amp;lt;E&amp;gt; obtemEntradas&amp;#40;&amp;#41; {
        &amp;#40;...&amp;#41;;
}

List&amp;lt;S&amp;gt; saidas = new ArrayList&amp;lt;S&amp;gt;&amp;#40;&amp;#41;;
List&amp;lt;E&amp;gt; entradas = obtemEntradas&amp;#40;&amp;#41;;
for&amp;#40;E entrada : entradas&amp;#41; {
            saidas.add&amp;#40;opera&amp;#40;entrada&amp;#41;&amp;#41;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;map&quot;&gt;Map&lt;/h3&gt;&lt;p&gt;Para o mesmo exemplo acima, daria pra fazer, em Clojure:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;&amp;#40;map inc &amp;#40;range 10&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;&amp;#40;defn obtem-entradas &amp;#91;&amp;#93; &amp;#40;...&amp;#41;&amp;#41;
&amp;#40;defn opera &amp;#91;e&amp;#93; &amp;#40;...&amp;#41;&amp;#41;

&amp;#40;map opera obtem-entradas&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Assim, a função &quot;map&quot; generaliza o conceito de &quot;aplicar uma operação em todos elementos de uma lista&quot;, além de tornar o código mais expressivo e enxuto. Java possui esta funcionalidade a partir da versão 8. Ficaria assim, o primeiro exemplo:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;Integer&amp;#91;&amp;#93; saidas = Arrays.stream&amp;#40;new Integer&amp;#91;&amp;#93; { 0, 1, 2, 3, 4, 5, 5, 6, 7, 8, 9 }&amp;#41;
			 .map&amp;#40;e -&amp;gt; e + 1&amp;#41;
			 .toArray&amp;#40;Integer&amp;#91;&amp;#93;::new&amp;#41;;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Meio bizarro, mas mais expressivo que o loop for com certeza.&lt;/p&gt;&lt;h3 id=&quot;conclusão&quot;&gt;Conclusão&lt;/h3&gt;&lt;p&gt;Em várias coisas é &quot;depende&quot;, cada um tem suas vantagens e desvantagens, etc. Mas para esses dois jeitos de fazer a mesma coisa acima aí, prefiro &quot;map&quot; na grande maioria das vezes.&lt;/p&gt;
</description>
<pubDate>
Mon, 25 Jun 2018 00:00:00 -0300
</pubDate>
</item>
<item>
<guid>
http://danielhvs.github.io/./posts-output/2018-06-23-comandos-basicos-linux/
</guid>
<link>
http://danielhvs.github.io/./posts-output/2018-06-23-comandos-basicos-linux/
</link>
<title>
Comandos básicos de console
</title>
<description>
&lt;h3 id=&quot;ls:&amp;#95;lista&amp;#95;os&amp;#95;arquivos&amp;#95;e&amp;#95;pastas&amp;#95;onde&amp;#95;tu&amp;#95;tá.&quot;&gt;ls: Lista os arquivos e pastas onde tu tá.&lt;/h3&gt;&lt;p&gt;Uso sempre “ls -ltr” pois “-l” é para mostrar um embaixo do outro, “t” é para ordenar por “tempo” e “r” é para ordenar “revertido”, ou seja, mostra os arquivos novos no fim.&lt;/p&gt;&lt;h3 id=&quot;cat:&amp;#95;mostra&amp;#95;o&amp;#95;conteúdo&amp;#95;do&amp;#95;arquivo.&quot;&gt;cat: Mostra o conteúdo do arquivo.&lt;/h3&gt;&lt;p&gt;Imprime conteúdo de arquivo. Assim, sem ficar abrindo word, excel, whatever. Imprime o conteúdo do arquivo no console! Mostra logo esse arquivo que eu quero ver! Muito útil para ver rapidamente arquivos texto pequenos. Veja, arquivos texto é qualquer tipo de texto que um ser humano possa ler.&lt;/p&gt;&lt;h3 id=&quot;cd:&amp;#95;“change&amp;#95;directory”&amp;#95;vai&amp;#95;pra&amp;#95;pasta!&quot;&gt;cd: “change directory” vai pra pasta!&lt;/h3&gt;&lt;p&gt;Extremamente usado por motivos óbvios. Pode ser usado de forma relativa ou absoluta.&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;console&quot;&gt;relativa:
$ /home/joao.da.silva: cd Downloads
$ /home/joao.da.silva/Downloads:

absoluta:
$ /home/joao.da.silva: cd /tmp
$ /tmp:
&lt;/code&gt;&lt;/pre&gt;
</description>
<pubDate>
Sat, 23 Jun 2018 00:00:00 -0300
</pubDate>
</item>
<item>
<guid>
http://danielhvs.github.io/./posts-output/2018-06-21-navegacao-pastas-linux/
</guid>
<link>
http://danielhvs.github.io/./posts-output/2018-06-21-navegacao-pastas-linux/
</link>
<title>
Navegação de pastas
</title>
<description>
&lt;p&gt;Quando você está no console do linux (tela preta cheia de letra branca ou branca cheia de letra preta), geralmente você está dentro de uma pasta (muitos chamam de diretório). Existem caracteres especiais pra ajudar na navegação entre pastas via linha de comando. Abaixo mostro os exemplos mais usados.&lt;/p&gt;&lt;h3 id=&quot;ponto&amp;#95;(.)&quot;&gt;Ponto (.)&lt;/h3&gt;&lt;p&gt;“.” é a pasta “atual” em que se está. Por exemplo, “cd .” não faz “nada”? Whuuuut?! Na realidade este comando “cd .” faz um “refresh” na pasta atual! Ou seja, se alguém copiou coisa lá pra dentro, tu já vê! Se alguém deletou, depois copiou, depois moveu, depois soltou um arquivo lá dentro, tu já vê!&lt;/p&gt;&lt;h3 id=&quot;til&amp;#95;(~)&quot;&gt;Til (~)&lt;/h3&gt;&lt;p&gt;“~” é a pasta “home” do usuário logado. Geralmente se tu é “joao.da.silva”, seu “~” é a pasta “/home/joao.da.silva”. Resumindo, tu usa “cd ~/Downloads” para acessar a pasta “/home/joao.da.silva/Downloads”.&lt;/p&gt;&lt;h3 id=&quot;ponto&amp;#95;ponto&amp;#95;(..)&quot;&gt;Ponto ponto (..)&lt;/h3&gt;&lt;p&gt;“..” é a pasta “pai” da pasta em que se está. Um uso comum é, por exemplo, se tu tá em “/home/joao.da.silva/Downloads”, pode usar o comando “cd ..” para entrar na pasta “/home/joao.da.silva”.&lt;/p&gt;&lt;h3 id=&quot;hífen&amp;#95;(-)&quot;&gt;Hífen (-)&lt;/h3&gt;&lt;p&gt;“-” é a pasta “anterior” à pasta em que se está. Por exemplo, se estou em “/home/joao.da.silva/Downloads” e faço “cd /usr/bin” e depois “cd -“, eu volto para “/home/joao.da.silva/Downloads”&lt;/p&gt;
</description>
<pubDate>
Thu, 21 Jun 2018 00:00:00 -0300
</pubDate>
</item>
</channel>
</rss>
